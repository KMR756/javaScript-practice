Excellent question ‚Äî **hoisting** is one of the *most misunderstood* but *most important* JavaScript concepts.

Here‚Äôs a **complete, real-world + interview-focused explanation** for you üëá

---

# ‚öôÔ∏è JavaScript Hoisting ‚Äî Complete Notes (Interview + Real-World)

---

## üîπ 1Ô∏è‚É£ What Is Hoisting?

**Hoisting** is JavaScript‚Äôs default behavior of **moving declarations to the top of their scope** (before code execution).

> In simple words:
> **You can use variables and functions before they‚Äôre declared** ‚Äî because JS ‚Äúhoists‚Äù the declarations to the top during the *creation phase*.

---

## üîπ 2Ô∏è‚É£ How Hoisting Works (Behind the Scenes)

When JavaScript runs your code, it does it in **two phases**:

1. **Creation Phase** ‚Äî memory is allocated for variables and functions.

   * Variables are initialized as `undefined`.
   * Function declarations are fully hoisted (code too).
2. **Execution Phase** ‚Äî the code runs line by line.

---

## üîπ 3Ô∏è‚É£ Example: Variable Hoisting (with `var`)

```js
console.log(a); // undefined
var a = 10;
```

‚úÖ Why no error?
Because JS interprets it like this:

```js
var a;
console.log(a); // undefined
a = 10;
```

Only the **declaration** is hoisted, not the **assignment**.

---

## üîπ 4Ô∏è‚É£ `let` and `const` Hoisting (Temporal Dead Zone)

```js
console.log(x); // ‚ùå ReferenceError
let x = 5;
```

‚úÖ `let` and `const` are **also hoisted**,
but they are kept in a **Temporal Dead Zone (TDZ)** until the code reaches their declaration line.

So, you **cannot access** them before declaration.

---

### TDZ Example

```js
{
  console.log(msg); // ‚ùå ReferenceError
  const msg = "Hello!";
}
```

The variable exists in memory but is **not accessible** before its line of declaration.

---

## üîπ 5Ô∏è‚É£ Function Hoisting

### Function Declaration (Hoisted ‚úÖ)

```js
greet(); // ‚úÖ Works
function greet() {
  console.log("Hello Rejoan");
}
```

‚úÖ Function declarations are fully hoisted (both name and body).

---

### Function Expression (Not Hoisted ‚ùå)

```js
sayHi(); // ‚ùå TypeError: sayHi is not a function
var sayHi = function() {
  console.log("Hi!");
};
```

‚úÖ JS hoists the **variable declaration** (`sayHi`) but not the function definition.
So during execution, `sayHi` is `undefined` at first.

---

### Arrow Function (Not Hoisted ‚ùå)

```js
hello(); // ‚ùå Cannot access 'hello' before initialization
const hello = () => console.log("Hello!");
```

‚úÖ Same as function expressions ‚Äî **not hoisted**.

---

## üîπ 6Ô∏è‚É£ Real-World Example

If you use variables before declaring them, you might face unexpected behavior:

```js
function getUser() {
  console.log(user); // undefined
  var user = "Rejoan";
}
getUser();
```

‚úÖ JS interprets it as:

```js
function getUser() {
  var user;
  console.log(user);
  user = "Rejoan";
}
```

That‚Äôs why you get `undefined`, not `ReferenceError`.

---

## üîπ 7Ô∏è‚É£ Best Practice in Real Projects

‚úÖ Always **declare variables and functions at the top** of their scope.
‚úÖ Use `let` and `const` (they respect block scope and avoid hoisting issues).
‚úÖ Avoid relying on hoisting ‚Äî it reduces code clarity.

---

## üîπ 8Ô∏è‚É£ Hoisting in Classes (Important for Interviews)

```js
const obj = new Person(); // ‚ùå ReferenceError
class Person {
  constructor() {
    console.log("Person created");
  }
}
```

‚úÖ Classes are **not hoisted**, and they also have a **temporal dead zone**.

---

## üîπ 9Ô∏è‚É£ Hoisting Summary Table

| Keyword / Type       | Hoisted?    | Initialized as             | Accessible before declaration? |
| -------------------- | ----------- | -------------------------- | ------------------------------ |
| `var`                | ‚úÖ Yes       | `undefined`                | ‚úÖ Yes (undefined)              |
| `let`                | ‚úÖ Yes       | Uninitialized (TDZ)        | ‚ùå No                           |
| `const`              | ‚úÖ Yes       | Uninitialized (TDZ)        | ‚ùå No                           |
| Function Declaration | ‚úÖ Fully     | Function itself            | ‚úÖ Yes                          |
| Function Expression  | ‚ùå No        | Depends on `var/let/const` | ‚ùå No                           |
| Arrow Function       | ‚ùå No        | Depends on `var/let/const` | ‚ùå No                           |
| Class                | ‚úÖ (but TDZ) | Uninitialized              | ‚ùå No                           |

---

## üîπ 10Ô∏è‚É£ Common Interview Questions

1. What is **hoisting** in JavaScript?
2. Are variables and functions hoisted differently?
3. What is the **Temporal Dead Zone (TDZ)**?
4. Does hoisting occur for `let` and `const`?
5. What happens when you call a function expression before defining it?
6. Are **arrow functions** hoisted?
7. Is **class declaration** hoisted?
8. What is the **output** of:

   ```js
   console.log(a);
   var a = 5;
   console.log(b);
   let b = 10;
   ```

   ‚Üí Output: `undefined` then `ReferenceError`.

---

## üîπ 11Ô∏è‚É£ In One Line (Simple Definition)

> **Hoisting** = JS moves variable and function **declarations** to the top of their scope before execution.
> But **initializations** stay in place.

---

## ‚úÖ Real-World Advice

* Always **declare variables first**.
* Prefer `const` and `let` over `var`.
* Do not depend on hoisting ‚Äî write clean, top-down code.
* Remember: **functions hoist fully**, but **variables only partially**.

---

Would you like me to give you the **next complete note on ‚ÄúExecution Context & Call Stack‚Äù**?
It‚Äôs the **core concept** behind how hoisting, scope, and closures actually *work* ‚Äî and one of the **top 5 JS interview questions**.
